{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/material.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div style=\\\"text-align:center\\\">\\n  <h1>\\n    Welcome to my new application {{ title }}!\\n  </h1>\\n   <div class=row>\\n   \\n     <h3 class=\\\"col-12\\\"> Formulaire with material module:</h3>\\n     <form [formGroup]=\\\"form\\\" class=\\\"col-6 mx-auto\\\"><br/><br/>\\n      <!--<input type=\\\"text\\\" formControlName=\\\"input\\\"><br/><br/> -->\\n      <mat-form-field floatPlaceholder=\\\"always\\\">\\n       <!--<mat-place-holder> name </mat-place-holder>-->\\n        <input matInput type=\\\"text\\\" placeholder=\\\"name\\\" formControlName=\\\"input\\\">\\n        <mat-hint align=\\\"end\\\"> {{ form.get('input').value.length}}/10</mat-hint>\\n      \\n      </mat-form-field><br/><br/>\\n\\n      <mat-form-field>\\n       <!--<mat-place-holder> name </mat-place-holder>-->\\n        <input matInput type=\\\"text\\\" placeholder=\\\"email\\\" formControlName=\\\"email\\\">\\n        <mat-hint align=\\\"end\\\"> {{ form.get('email').value.length}}/10</mat-hint>\\n        <mat-error *ngIf=\\\"form.get('email').invalid\\\">{{ getError()}}</mat-error>\\n      </mat-form-field><br/><br/>\\n      <!--<input type=\\\"checkbox\\\" formControlName=\\\"checkbox\\\"><br/><br/>-->\\n      <mat-checkbox formControlName=\\\"checkbox\\\"> Vrai/Faux</mat-checkbox><br/><br/>\\n       <mat-radio-group formControlName=\\\"radio\\\">\\n        <mat-radio-button value=\\\"Homme\\\">Homme</mat-radio-button>\\n        <mat-radio-button value=\\\"Femme\\\">Femme</mat-radio-button>\\n      </mat-radio-group><br/><br/>\\n       <!--<input type=\\\"radio\\\" formControlName=\\\"radio\\\">Homme<br/>-->\\n       <!--<input type=\\\"radio\\\" formControlName=\\\"radio\\\">Femme<br/><br/>-->\\n       <!--<input type=\\\"radio\\\" formControlName=\\\"slidetoggle\\\">Homme<br/>-->\\n       <!--<input type=\\\"radio\\\" formControlName=\\\"slidetoggle\\\">Femme<br/><br/>-->\\n       <mat-slide-toggle formControlName=\\\"slidetoggle\\\">News letter ?</mat-slide-toggle><br/><br/>\\n\\n       <mat-form-field>\\n        <mat-select formControlName=\\\"select\\\" placeholder=\\\"food\\\">\\n        <mat-option value=\\\"pain\\\"> pain</mat-option>\\n         <mat-option value=\\\"pate\\\"> pate</mat-option>\\n         <mat-option value=\\\"pizza\\\"> pizza</mat-option>\\n        </mat-select>\\n       </mat-form-field><br/><br/>\\n       <mat-slider min=\\\"0\\\" max=\\\"10\\\" formControlName=\\\"slider\\\"></mat-slider><br/><br/>\\n\\n       <mat-form-field>\\n      \\n        <input matInput placeholder=\\\"choisir une date\\\" [matDatepicker]=\\\"picker\\\" formControlName=\\\"date\\\">\\n        <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n        <mat-datepicker #picker></mat-datepicker>\\n      </mat-form-field><br/><br/>\\n      <pre>{{ form.value | json }}</pre>\\n     </form>\\n     \\n   </div>\\n</div>\\n\\n\\n\"","import { Component } from '@angular/core';\nimport {FormGroup, Validators,FormControl,FormBuilder} from '@angular/forms'\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  \n  public form:FormGroup;\n\n  constructor(private fb:FormBuilder)\n  {\n\n  }\n\n  ngOnInit(){\n    this.form = this.fb.group({\n      email: [\"\",Validators.email],\n      input: [\"\"],\n      checkbox: [\"\"],\n      radio: [\"\"],\n      slidetoggle: [\"\"],\n      select:[\"\"],\n      range:[\"\"],\n      date:[\"\"]\n    });\n  }\n\n  ngOnSubmit()\n  {\n    console.log(this.form.value);\n  }\n\n  public getError():string\n  {  \n    if(this.form.get(\"email\").hasError('email'))\n    {\n      return `l'email n'est pas valide`\n    }\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule} from \"./material.module\"\nimport { AppComponent } from './app.component';\nimport {ReactiveFormsModule} from '@angular/forms'\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, BrowserAnimationsModule,ReactiveFormsModule, MaterialModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport \"hammerjs/hammer\";\nimport { MatFormFieldModule,\n  MatInputModule,\n  MatButtonModule,\n  MatCheckboxModule,\n  MatRadioModule,\n  MatSlideToggleModule,\n  MatSelectModule,\n  MatSliderModule,\n MatDatepickerModule,\n MatNativeDateModule} from \"@angular/material\";\n\nconst MATERIAL = [\n  MatButtonModule,\n  MatCheckboxModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatRadioModule,\n  MatSlideToggleModule,\n  MatSelectModule,\n  MatSliderModule,\n  MatNativeDateModule,\n  MatDatepickerModule\n];\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, ...MATERIAL],\n  exports:MATERIAL\n})\nexport class MaterialModule {}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}